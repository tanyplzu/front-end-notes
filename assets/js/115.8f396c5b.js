(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{536:function(v,_,t){"use strict";t.r(_);var a=t(15),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"前端性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化"}},[v._v("#")]),v._v(" 前端性能优化")]),v._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#网络请求优化"}},[v._v("网络请求优化")])]),t("li",[t("a",{attrs:{href:"#资源文件的优化"}},[v._v("资源文件的优化")])]),t("li",[t("a",{attrs:{href:"#首屏加载优化"}},[v._v("首屏加载优化")])]),t("li",[t("a",{attrs:{href:"#渲染过程优化"}},[v._v("渲染过程优化")])]),t("li",[t("a",{attrs:{href:"#计算-逻辑运行提速"}},[v._v("计算/逻辑运行提速")])]),t("li",[t("a",{attrs:{href:"#资料来源"}},[v._v("资料来源")])])])]),t("p"),v._v(" "),t("p",[v._v("前端性能是一个太过宽泛的话题，脱离场景和需求谈性能往往毫无意义。")]),v._v(" "),t("h2",{attrs:{id:"网络请求优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络请求优化"}},[v._v("#")]),v._v(" 网络请求优化")]),v._v(" "),t("p",[v._v("网络请求优化的目标在于减少网络资源的请求和加载耗时，可以参考以下优化方案：")]),v._v(" "),t("ul",[t("li",[v._v("减少 DNS 查询时间，比如使用浏览器 DNS 缓存、计算机 DNS 缓存、服务器 DNS 缓存")]),v._v(" "),t("li",[v._v("合理地使用 CDN，有效地减少网络请求耗时；")]),v._v(" "),t("li",[v._v("对请求资源进行缓存，包括但不限于使用浏览器缓存、HTTP 缓存、后台缓存，比如使用 Service Worker、PWA 等技术；")]),v._v(" "),t("li",[v._v("对请求进行优化，比如对多个请求进行合并，减少通信次数；对请求进行域名拆分，提升并发请求数量。")]),v._v(" "),t("li",[v._v("使用 HTTP/2，提升资源请求速度;")])]),v._v(" "),t("h2",{attrs:{id:"资源文件的优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#资源文件的优化"}},[v._v("#")]),v._v(" 资源文件的优化")]),v._v(" "),t("ul",[t("li",[v._v("移除代码中无用的部分，比如使用 Tree-shaking、代码分割、移除用不上的依赖项等；")]),v._v(" "),t("li",[v._v("对请求资源进行合理的拆分（CSS、Javascript 脚本、图片/音频/视频等），减少请求资源的体积；")]),v._v(" "),t("li",[v._v("对资源进行压缩，减少传输数据大小；Gzip 压缩。")]),v._v(" "),t("li",[v._v("使用 prefetch / preload 预加载等新特性")])]),v._v(" "),t("h2",{attrs:{id:"首屏加载优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#首屏加载优化"}},[v._v("#")]),v._v(" 首屏加载优化")]),v._v(" "),t("p",[v._v("首屏加载优化的方案主要包括两方面："),t("strong",[v._v("首屏加载耗时优化以及使用页面过渡效果")]),v._v("。其中，性能和渲染耗时优化属于技术优化手段，可以通过以下方式进行：")]),v._v(" "),t("ul",[t("li",[v._v("对页面进行分片/分屏加载，将页面可见/可交互时间提前；")]),v._v(" "),t("li",[v._v("优化资源加载的顺序和粒度，仅加载需要的资源，通过异步加载方式加载剩余资源；")]),v._v(" "),t("li",[v._v("使用差异化服务，比如读写分离，对于不同场景按需加载所需要的模块；")]),v._v(" "),t("li",[v._v("使用服务端直出渲染，减少页面二次请求和渲染的耗时；")]),v._v(" "),t("li",[v._v("使用秒看技术，通过预览的方式（比如图片）提前将页面内容提供给用户；")]),v._v(" "),t("li",[v._v("配合客户端进行资源预请求和预加载，比如使用预热 Web 容器；")]),v._v(" "),t("li",[v._v("配合客户端将资源和数据进行离线，可用于下一次页面的快速渲染。")])]),v._v(" "),t("p",[v._v("页面过渡效果：常见的方案包括使用骨架屏进行预渲染。")]),v._v(" "),t("h2",{attrs:{id:"渲染过程优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程优化"}},[v._v("#")]),v._v(" 渲染过程优化")]),v._v(" "),t("p",[v._v("渲染过程的优化，主要在于减少用户的操作等待时间，避免出现卡顿的情况，比如：")]),v._v(" "),t("ul",[t("li",[v._v("使用资源预加载，在空闲时间，提前将用户可能需要用到的资源进行获取并加载；")]),v._v(" "),t("li",[v._v("减少 DOM 数量、减少/合并 DOM 操作，减少浏览器渲染过程中的计算耗时；")]),v._v(" "),t("li",[v._v("通过合理使用浏览器 GPU 合成，提升浏览器渲染效率；")]),v._v(" "),t("li",[v._v("使用离屏渲染，在页面不可见的地方提前进行渲染（比如 Canvas 渲染）；")]),v._v(" "),t("li",[v._v("通过将页面渲染帧率保持在 60FPS 左右，提升页面交互和渲染的流畅度。")])]),v._v(" "),t("h2",{attrs:{id:"计算-逻辑运行提速"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算-逻辑运行提速"}},[v._v("#")]),v._v(" 计算/逻辑运行提速")]),v._v(" "),t("p",[v._v("计算/逻辑运行速度优化的方式主要包括：")]),v._v(" "),t("ul",[t("li",[v._v("通过将 Javscript 大任务进行拆解 + 并行计算的方式，有效地降低整体计算耗时，比如使用 Web Worker；")]),v._v(" "),t("li",[v._v("通过使用运行效率更高的方式，减少计算耗时，比如使用 Webassembly；")]),v._v(" "),t("li",[v._v("通过将计算过程提前，减少计算等待时长，比如使用 AOT 技术；")]),v._v(" "),t("li",[v._v("通过使用更优的算法或是存储结构，提升计算效率，比如 VSCode 使用红黑树优化文本缓冲区的计算；")]),v._v(" "),t("li",[v._v("通过将计算结果缓存的方式，减少运算次数。")])]),v._v(" "),t("h2",{attrs:{id:"资料来源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#资料来源"}},[v._v("#")]),v._v(" 资料来源")]),v._v(" "),t("p",[v._v("王贝珊（被删）"),t("a",{attrs:{href:"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=822#/detail/pc?id=7217",target:"_blank",rel:"noopener noreferrer"}},[v._v("前端性能优化与解决方案"),t("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);