(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{502:function(t,a,e){"use strict";e.r(a);var s=e(5),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ts3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts3"}},[t._v("#")]),t._v(" TS3")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#interfaces-vs-type-aliases"}},[t._v("Interfaces vs. Type Aliases")]),a("ul",[a("li",[a("a",{attrs:{href:"#对-type-的定义叫-type-alias-而非直接就叫-type"}},[t._v("对 type 的定义叫 type alias 而非直接就叫 type")])]),a("li",[a("a",{attrs:{href:"#到底应该用-type-还是-interface"}},[t._v("到底应该用 type 还是 interface ？")])]),a("li",[a("a",{attrs:{href:"#资料"}},[t._v("资料")])])])])])]),a("p"),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.typescriptlang.org/docs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript Documentation"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"interfaces-vs-type-aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interfaces-vs-type-aliases"}},[t._v("#")]),t._v(" Interfaces vs. Type Aliases")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#interfaces-vs-type-aliases",target:"_blank",rel:"noopener noreferrer"}},[t._v("Interfaces vs. Type Aliases"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/351213183",target:"_blank",rel:"noopener noreferrer"}},[t._v("Typescript 中 type 和 interface 有什么区别？"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("As we mentioned, type aliases can act sort of like interfaces; however, there are some subtle differences.\nAlmost all features of an interface are available in type, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.")])]),t._v(" "),a("p",[t._v("Extending an interface")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bear")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  honey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bear "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("honey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Extending a type via intersections")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bear")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Animal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  honey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bear "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("honey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("主要区别：")]),t._v(" "),a("ul",[a("li",[t._v("接口是通过 extends 继承的方式来扩展，类型别名是通过 & 来扩展。")]),t._v(" "),a("li",[t._v("接口可以自动合并，而类型别名不行")]),t._v(" "),a("li",[t._v("interface 与 type 都可以描述对象类型、函数类型、Class 类型，但 interface 无法像 type 那样表达元组、一组联合类型等等。")]),t._v(" "),a("li",[t._v("interface 无法使用映射类型等类型工具，也就意味着在类型编程场景中我们还是应该使用 type。")])]),t._v(" "),a("blockquote",[a("p",[t._v("interface 就是描述对象对外暴露的接口，其不应该具有过于复杂的类型逻辑，最多局限于泛型约束与索引类型这个层面。而 type alias 就是用于将一组类型的重命名，或是对类型进行复杂编程。")])]),t._v(" "),a("h3",{attrs:{id:"对-type-的定义叫-type-alias-而非直接就叫-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对-type-的定义叫-type-alias-而非直接就叫-type"}},[t._v("#")]),t._v(" 对 type 的定义叫 type alias 而非直接就叫 type")]),t._v(" "),a("ul",[a("li",[t._v("Typescript 的 type 关键字表示的是类型别名；")]),t._v(" "),a("li",[t._v("被 type 关键词声明的变量表示的还是 Types (比如 Animal 就是动物类型)；")])]),t._v(" "),a("h3",{attrs:{id:"到底应该用-type-还是-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#到底应该用-type-还是-interface"}},[t._v("#")]),t._v(" 到底应该用 type 还是 interface ？")]),t._v(" "),a("ul",[a("li",[t._v("能用 interface 的地方就用 interface，否则用 type。如果我们是定义一个 object，那么最好是使用 interface 去做类型声明，什么时候用 type 呢，当定义一个 function 的时候，用 type 会更好一些")])]),t._v(" "),a("blockquote",[a("p",[t._v("很多同学更喜欢用 type（Type Alias，类型别名）来代替接口结构描述对象，而我更推荐的方式是，interface 用来描述对象、类的结构，而类型别名用来将一个函数签名、一组联合类型、一个工具类型等等抽离成一个完整独立的类型。但大部分场景下接口结构都可以被类型别名所取代，因此，只要你觉得统一使用类型别名让你觉得更整齐，也没什么问题。")])]),t._v(" "),a("h3",{attrs:{id:"资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/44344256",target:"_blank",rel:"noopener noreferrer"}},[t._v("写了这么多年代码，你真的了解 SOLID 吗？"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);