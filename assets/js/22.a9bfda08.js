(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{303:function(t,a,s){t.exports=s.p+"assets/img/v8-zhixing.8a34ae8c.jpg"},387:function(t,a,s){"use strict";s.r(a);var n=s(5),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"v8-工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-工作原理"}},[t._v("#")]),t._v(" V8 工作原理")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#数据是如何存储的"}},[t._v("数据是如何存储的")])]),a("li",[a("a",{attrs:{href:"#闭包的内存模型"}},[t._v("闭包的内存模型")])]),a("li",[a("a",{attrs:{href:"#内存溢出和内存泄漏"}},[t._v("内存溢出和内存泄漏")])]),a("li",[a("a",{attrs:{href:"#什么是垃圾回收机制"}},[t._v("什么是垃圾回收机制")])]),a("li",[a("a",{attrs:{href:"#v8-垃圾回收"}},[t._v("V8 垃圾回收")])]),a("li",[a("a",{attrs:{href:"#v8-执行-javascrip-的流程图"}},[t._v("V8 执行 JavaScrip 的流程图")])]),a("li",[a("a",{attrs:{href:"#编译器的-前端-技术"}},[t._v("编译器的“前端”技术")])]),a("li",[a("a",{attrs:{href:"#vue-中编译的三个阶段"}},[t._v("Vue 中编译的三个阶段")])]),a("li",[a("a",{attrs:{href:"#线程和进程的区别"}},[t._v("线程和进程的区别")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"数据是如何存储的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据是如何存储的"}},[t._v("#")]),t._v(" 数据是如何存储的")]),t._v(" "),a("p",[t._v("JavaScript 中的 8 种数据类型，它们可以分为两大类——原始类型和引用类型。原始类型的数据是存放在栈中，引用类型的数据是存放在堆中的。堆中的数据是通过引用和变量关联起来的。也就是说，JavaScript 的变量是没有数据类型的，值才有数据类型，变量可以随时持有任何类型的数据。")]),t._v(" "),a("h2",{attrs:{id:"闭包的内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包的内存模型"}},[t._v("#")]),t._v(" 闭包的内存模型")]),t._v(" "),a("p",[t._v("产生闭包的核心有两步：第一步是需要预扫描内部函数；第二步是把内部函数引用的外部变量保存到堆中。")]),t._v(" "),a("h2",{attrs:{id:"内存溢出和内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出和内存泄漏"}},[t._v("#")]),t._v(" 内存溢出和内存泄漏")]),t._v(" "),a("p",[t._v("内存溢出和内存泄漏发生条件是什么？如何避免？")]),t._v(" "),a("ul",[a("li",[t._v("内存泄漏;")]),t._v(" "),a("li",[t._v("循环引用;")]),t._v(" "),a("li",[t._v("闭包;")]),t._v(" "),a("li",[t._v("全局变量;")]),t._v(" "),a("li",[t._v("没有清理的 DOM 元素引用;")]),t._v(" "),a("li",[t._v("被遗忘的定时器以及其中的引用;")])]),t._v(" "),a("h2",{attrs:{id:"什么是垃圾回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是垃圾回收机制"}},[t._v("#")]),t._v(" 什么是垃圾回收机制")]),t._v(" "),a("ul",[a("li",[t._v("在程序执行的过程中，解释器会为创建出来的变量分配内存来存储这些变量的实体，执行环境会负责管理代码执行过程中使用到的内存，而何时划出新的内存以及何时把占用的内存释放出来的这样一套内存自动管理机制就是垃圾回收机制。这种周期性的回收策略主要有两种。")]),t._v(" "),a("li",[t._v("标记清除：当变量进入环境时，就将这个变量标记为'进入环境'，而当这个变量离开环境时，则将其标记为'离开环境'。垃圾收集器会给内存中的每个变量都做上标记，然后它会去掉环境中的变量以及被环境中变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，最后垃圾收集器完成内存清除工作。")]),t._v(" "),a("li",[t._v("引用计数：追踪记录每个值被引用的次数，当声明了一个变量并将一个引用类型赋给该变量时，这个变量的引用次数就是 1。相反如果包含这个值引用的变量又取得了另外一个值，则这个值的引用次数减 1。当为 0 时，这说明没有办法再访问这个值了，因此垃圾收集器下次运行时，就会释放该值占用的内存。")])]),t._v(" "),a("h2",{attrs:{id:"v8-垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-垃圾回收"}},[t._v("#")]),t._v(" V8 垃圾回收")]),t._v(" "),a("p",[t._v("垃圾回收策略一般分为手动回收和自动回收，java python JavaScript 等高级预言为了减轻程序员负担和出错概率采用了自动回收策略。")]),t._v(" "),a("p",[t._v("JavaScript 的原始类型数据和引用数据是分别存储在栈和椎中的，由于栈和堆分配空间大小差异，垃圾回收方式也不一样。")]),t._v(" "),a("p",[t._v("栈中分配空间通过 ESP 的向下移动销毁保存在栈中数据；堆中垃圾回收主要通过副垃圾回收器（新生代）和主垃圾回收器（老生代）负责的。")]),t._v(" "),a("p",[t._v("副垃圾回收器采用 scavenge 算法将区域分为对象区域和空闲区域，通过两个区域的反转让新生代区域无限使用下去。")]),t._v(" "),a("p",[t._v("主垃圾回收器采用 Mark-Sweep（Mark-Compact Incremental Marking 解决不同场景下问题的算法改进）算法进行空间回收的。")]),t._v(" "),a("p",[t._v("无论是主副垃圾回收器的策略都是标记 - 清除 - 整理三个大的步骤。另外还有新生代的晋升策略（两次未清除的），大对象直接分配在老生代。")]),t._v(" "),a("h2",{attrs:{id:"v8-执行-javascrip-的流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-执行-javascrip-的流程图"}},[t._v("#")]),t._v(" V8 执行 JavaScrip 的流程图")]),t._v(" "),a("p",[a("img",{attrs:{src:s(303),alt:"v8"}})]),t._v(" "),a("blockquote",[a("p",[t._v("编译器（Compiler）、解释器（Interpreter）、抽象语法树（AST）、字节码（Bytecode）、即时编译器（JIT）")])]),t._v(" "),a("ul",[a("li",[t._v("初始化基础环境；")]),t._v(" "),a("li",[t._v("解析源码生成 AST 和作用域；")]),t._v(" "),a("li",[t._v("依据 AST 和作用域生成字节码；")]),t._v(" "),a("li",[t._v("解释执行字节码；")]),t._v(" "),a("li",[t._v("监听热点代码；")]),t._v(" "),a("li",[t._v("优化热点代码为二进制的机器代码；")]),t._v(" "),a("li",[t._v("反优化生成的二进制机器代码")])]),t._v(" "),a("h2",{attrs:{id:"编译器的-前端-技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器的-前端-技术"}},[t._v("#")]),t._v(" 编译器的“前端”技术")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("词法分析")]),t._v("是把程序分割成一个个 Token 的过程，可以通过构造有限自动机来实现。")]),t._v(" "),a("li",[a("strong",[t._v("语法分析")]),t._v("是把程序的结构识别出来，并形成一棵便于由计算机处理的抽象语法树。可以用递归下降的算法来实现。")]),t._v(" "),a("li",[a("strong",[t._v("语义分析")]),t._v("是消除语义模糊，生成一些属性信息，让计算机能够依据这些信息生成目标代码。")])]),t._v(" "),a("h2",{attrs:{id:"vue-中编译的三个阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-中编译的三个阶段"}},[t._v("#")]),t._v(" Vue 中编译的三个阶段")]),t._v(" "),a("p",[t._v("compile 编译可以分成 parse、optimize 与 generate 三个阶段：")]),t._v(" "),a("ul",[a("li",[t._v("parse：会用正则等方式将 template 模板中进行字符串解析，得到指令、class、style 等数据，形成 AST。")]),t._v(" "),a("li",[t._v("optimize：为静态的节点做上一些「标记」，在 patch 的时候我们就可以直接跳过这些被标记的节点的比对，从而达到「优化」的目的。经过 optimize 这层的处理，每个节点会加上 static 属性，用来标记是否是静态的。")]),t._v(" "),a("li",[t._v("generate：generate 会将 AST 转化成 render funtion 字符串，最终得到 render 的字符串以及 staticRenderFns 字符串。")])]),t._v(" "),a("p",[t._v("Vue.js 编译得到的结果：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" isShow\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("staticClass")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_l")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'span'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("此部操作在运行前还是在运行中，是 Vue 的优化点，Vue 也提供了不同的运行机制。")])]),t._v(" "),a("h2",{attrs:{id:"线程和进程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程和进程的区别"}},[t._v("#")]),t._v(" 线程和进程的区别")]),t._v(" "),a("p",[t._v("一个进程就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫进程。线程是不能单独存在的，它是由进程来启动和管理的。进程和线程之间的关系有以下 4 个特点：")]),t._v(" "),a("ol",[a("li",[t._v("进程中的任意一线程执行出错，都会导致整个进程的崩溃。")]),t._v(" "),a("li",[t._v("线程之间共享进程中的数据。")]),t._v(" "),a("li",[t._v("当一个进程关闭之后，操作系统会回收进程所占用的内存。")]),t._v(" "),a("li",[t._v("进程之间的内容相互隔离。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);