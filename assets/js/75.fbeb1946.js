(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{464:function(t,e,r){"use strict";r.r(e);var a=r(15),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"控制反转-ioc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#控制反转-ioc"}},[t._v("#")]),t._v(" 控制反转 IOC")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/60995312",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅析控制反转"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"组合和继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组合和继承"}},[t._v("#")]),t._v(" 组合和继承")]),t._v(" "),r("p",[t._v("如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承。除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。")])])}),[],!1,null,null,null);e.default=n.exports}}]);