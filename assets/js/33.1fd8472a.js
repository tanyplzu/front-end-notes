(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{325:function(a,t,r){a.exports=r.p+"assets/img/audits.7041b4d9.png"},501:function(a,t,r){"use strict";r.r(t);var v=r(5),s=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"浏览器中的页面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中的页面"}},[a._v("#")]),a._v(" 浏览器中的页面")]),a._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#渲染流程"}},[a._v("渲染流程")]),t("ul",[t("li",[t("a",{attrs:{href:"#分层"}},[a._v("分层")])]),t("li",[t("a",{attrs:{href:"#图层绘制"}},[a._v("图层绘制")])]),t("li",[t("a",{attrs:{href:"#栅格化-raster-操作"}},[a._v("栅格化（raster）操作")])]),t("li",[t("a",{attrs:{href:"#相关概念"}},[a._v("相关概念")])]),t("li",[t("a",{attrs:{href:"#分层和合成机制-扩展"}},[a._v("分层和合成机制(扩展)")])])])]),t("li",[t("a",{attrs:{href:"#javascript-是如何影响-dom-树构建的"}},[a._v("JavaScript 是如何影响 DOM 树构建的")]),t("ul",[t("li",[t("a",{attrs:{href:"#预解析操作"}},[a._v("预解析操作")])]),t("li",[t("a",{attrs:{href:"#async-和-defer"}},[a._v("async 和 defer")])]),t("li",[t("a",{attrs:{href:"#css-和-js-同时存在的问题"}},[a._v("css 和 JS 同时存在的问题")])])])]),t("li",[t("a",{attrs:{href:"#css-如何影响首次加载时的白屏时间"}},[a._v("CSS 如何影响首次加载时的白屏时间")])]),t("li",[t("a",{attrs:{href:"#如何系统地优化页面"}},[a._v("如何系统地优化页面")]),t("ul",[t("li",[t("a",{attrs:{href:"#加载阶段"}},[a._v("加载阶段")])]),t("li",[t("a",{attrs:{href:"#交互阶段"}},[a._v("交互阶段")])])])]),t("li",[t("a",{attrs:{href:"#pwa"}},[a._v("PWA")])]),t("li",[t("a",{attrs:{href:"#加载阶段性能-使用-audits-来优化-web-性能"}},[a._v("加载阶段性能：使用 Audits 来优化 Web 性能")])]),t("li",[t("a",{attrs:{href:"#页面性能工具-如何使用-performance"}},[a._v("页面性能工具：如何使用 Performance")])]),t("li",[t("a",{attrs:{href:"#性能分析工具-如何分析-performance-中的-main-指标"}},[a._v("性能分析工具：如何分析 Performance 中的 Main 指标")])])])]),t("p"),a._v(" "),t("h2",{attrs:{id:"渲染流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程"}},[a._v("#")]),a._v(" 渲染流程")]),a._v(" "),t("blockquote",[t("p",[a._v("流水线可分为如下几个子阶段：构建 DOM 树、样式计算、布局阶段、分层、绘制、分块、光栅化和合成")])]),a._v(" "),t("ul",[t("li",[a._v("渲染进程将 HTML 内容转换为能够读懂的 DOM 树结构。")]),a._v(" "),t("li",[a._v("渲染引擎将 CSS 样式表转化为浏览器可以理解的 styleSheets，计算出 DOM 节点的样式。")]),a._v(" "),t("li",[a._v("创建布局树，并计算元素的布局信息。")]),a._v(" "),t("li",[a._v("对布局树进行分层，并生成分层树。")]),a._v(" "),t("li",[a._v("为每个图层生成绘制列表，并将其提交到合成线程。")]),a._v(" "),t("li",[a._v("合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。")]),a._v(" "),t("li",[a._v("合成线程发送绘制图块命令 DrawQuad 给浏览器进程。")]),a._v(" "),t("li",[a._v("浏览器进程根据 DrawQuad 消息生成页面，并显示到显示器上。")])]),a._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[a._v("渲染流程")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/97/37/975fcbf7f83cc20d216f3d68a85d0f37.png",alt:"渲染流程"}})])]),a._v(" "),t("h3",{attrs:{id:"分层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[a._v("#")]),a._v(" 分层")]),a._v(" "),t("p",[a._v("页面中有很多复杂的效果，如一些复杂的 3D 变换、页面滚动，或者使用 z-indexing 做 z 轴排序等，为了更加方便地实现这些效果，渲染引擎还需要为特定的节点生成专用的图层，并生成一棵对应的图层树（LayerTree）")]),a._v(" "),t("blockquote",[t("p",[a._v("可以在 Chrome 的“开发者工具”，选择“Layers”标签查看")])]),a._v(" "),t("ul",[t("li",[a._v("拥有"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context",target:"_blank",rel:"noopener noreferrer"}},[a._v("层叠上下文"),t("OutboundLink")],1),a._v("属性的元素会被提升为单独的一层。")]),a._v(" "),t("li",[a._v("需要剪裁（clip）的地方也会被创建为图层")])]),a._v(" "),t("h3",{attrs:{id:"图层绘制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图层绘制"}},[a._v("#")]),a._v(" 图层绘制")]),a._v(" "),t("p",[a._v("“开发者工具”的“Layers”标签，选择“document”层，来实际体验下绘制列表")]),a._v(" "),t("h3",{attrs:{id:"栅格化-raster-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栅格化-raster-操作"}},[a._v("#")]),a._v(" 栅格化（raster）操作")]),a._v(" "),t("ul",[t("li",[a._v("绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的合成线程来完成的。")]),a._v(" "),t("li",[a._v("合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图。")]),a._v(" "),t("li",[a._v("栅格化过程都会使用 GPU 来加速生成，使用 GPU 生成位图的过程叫快速栅格化，或者 GPU 栅格化，生成的位图被保存在 GPU 内存中。")])]),a._v(" "),t("h3",{attrs:{id:"相关概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[a._v("#")]),a._v(" 相关概念")]),a._v(" "),t("ul",[t("li",[a._v("重排需要更新完整的渲染流水线，所以开销也是最大的。")]),a._v(" "),t("li",[a._v("重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些。")]),a._v(" "),t("li",[a._v("使用了 CSS 的 transform 来实现动画效果，这可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。")])]),a._v(" "),t("h3",{attrs:{id:"分层和合成机制-扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分层和合成机制-扩展"}},[a._v("#")]),a._v(" 分层和合成机制(扩展)")]),a._v(" "),t("ul",[t("li",[a._v("显示器以每秒 60s 速度从前显示器读取前缓冲区的图片；")]),a._v(" "),t("li",[a._v("显卡合成新的图像，并将图像保存到后缓冲区中。")]),a._v(" "),t("li",[a._v("渲染流水线生成的每一副图片称为一帧。")]),a._v(" "),t("li",[a._v("通常渲染引擎生成一帧图像有三种方式：重排、重绘和合成。其中重排和重绘操作都是在渲染进程的主线程上执行的，比较耗时；而合成操作是在渲染进程的合成线程上执行的，执行速度快，且不占用主线程。")]),a._v(" "),t("li",[a._v("渲染引擎会通过合成线程直接去处理变换，这些变换并没有涉及到主线程，这样就大大提升了渲染的效率。这也是 CSS 动画比 JavaScript 动画高效的原因。")])]),a._v(" "),t("h2",{attrs:{id:"javascript-是如何影响-dom-树构建的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是如何影响-dom-树构建的"}},[a._v("#")]),a._v(" JavaScript 是如何影响 DOM 树构建的")]),a._v(" "),t("p",[a._v("HTML 解析器并不是等整个文档加载完成之后再解析的，而是网络进程加载了多少数据，HTML 解析器便解析多少数据。网络进程和渲染进程之间会建立一个共享数据的管道")]),a._v(" "),t("p",[a._v("解析到 "),t("code",[a._v("<script>")]),a._v(" 标签时，渲染引擎判断这是一段脚本，此时 HTML 解析器就会暂停 DOM 的解析，因为接下来的 JavaScript 可能要修改当前已经生成的 DOM 结构。")]),a._v(" "),t("p",[a._v("如过 JavaScript 脚本是外部文件，JavaScript 文件的下载过程会阻塞 DOM 解析，而通常下载又是非常耗时的，会受到网络环境、JavaScript 文件大小等因素的影响。以下是优化方案：")]),a._v(" "),t("h3",{attrs:{id:"预解析操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预解析操作"}},[a._v("#")]),a._v(" 预解析操作")]),a._v(" "),t("p",[a._v("当渲染引擎收到字节流之后，会开启一个预解析线程，用来分析 HTML 文件中包含的 JavaScript、CSS 等相关文件，解析到相关文件之后，预解析线程会提前下载这些文件。")]),a._v(" "),t("h3",{attrs:{id:"async-和-defer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async-和-defer"}},[a._v("#")]),a._v(" async 和 defer")]),a._v(" "),t("p",[a._v("async 和 defer 虽然都是异步的，不过还有一些差异，使用 async 标志的脚本文件一旦加载完成，会立即执行；而使用了 defer 标记的脚本文件，需要在 DOMContentLoaded 事件之前执行。")]),a._v(" "),t("h3",{attrs:{id:"css-和-js-同时存在的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-和-js-同时存在的问题"}},[a._v("#")]),a._v(" css 和 JS 同时存在的问题")]),a._v(" "),t("p",[a._v("JavaScript 引擎在解析 JavaScript 之前，是不知道 JavaScript 是否操纵了 CSSOM 的，所以渲染引擎在遇到 JavaScript 脚本时，不管该脚本是否操纵了 CSSOM，都会执行 CSS 文件下载，解析操作，再执行 JavaScript 脚本。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("结论：")]),a._v(" "),t("p",[a._v("CSS 不阻塞 js 的加载，但是会阻塞 js 的执行；")])]),a._v(" "),t("h2",{attrs:{id:"css-如何影响首次加载时的白屏时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-如何影响首次加载时的白屏时间"}},[a._v("#")]),a._v(" CSS 如何影响首次加载时的白屏时间")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/76/1f/7641c75a80133e747aa2faae8f4c8d1f.png",alt:"含有 JavaScript 文件和 CSS 文件页面的渲染流水线"}})]),a._v(" "),t("p",[a._v("不管 CSS 文件和 JavaScript 文件谁先到达，都要先等到 CSS 文件下载完成并生成 CSSOM，然后再执行 JavaScript 脚本，最后再继续构建 DOM，构建布局树，绘制页面。")]),a._v(" "),t("p",[t("strong",[a._v("优化：")]),a._v(" 对于大的 CSS 文件，可以通过媒体查询属性，将其拆分为多个不同用途的 CSS 文件，这样只有在特定的场景下才会加载特定的 CSS 文件。")]),a._v(" "),t("h2",{attrs:{id:"如何系统地优化页面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何系统地优化页面"}},[a._v("#")]),a._v(" 如何系统地优化页面")]),a._v(" "),t("blockquote",[t("p",[a._v("通常一个页面有三个阶段：加载阶段、交互阶段和关闭阶段。")])]),a._v(" "),t("h3",{attrs:{id:"加载阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载阶段"}},[a._v("#")]),a._v(" 加载阶段")]),a._v(" "),t("p",[a._v("总的优化原则就是减少关键资源个数，降低关键资源大小，降低关键资源的 RTT 次数。")]),a._v(" "),t("h3",{attrs:{id:"交互阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交互阶段"}},[a._v("#")]),a._v(" 交互阶段")]),a._v(" "),t("ol",[t("li",[a._v("减少 JavaScript 脚本执行时间")]),a._v(" "),t("li",[a._v("避免强制同步布局")]),a._v(" "),t("li",[a._v("避免布局抖动")]),a._v(" "),t("li",[a._v("合理利用 CSS 合成动画")]),a._v(" "),t("li",[a._v("避免频繁的垃圾回收")])]),a._v(" "),t("h2",{attrs:{id:"pwa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pwa"}},[a._v("#")]),a._v(" PWA")]),a._v(" "),t("blockquote",[t("p",[a._v("PWA 提出了两种解决方案：通过引入 Service Worker 来试着解决离线存储和消息推送的问题，通过引入 manifest.json 来解决一级入口的问题。")])]),a._v(" "),t("ul",[t("li",[a._v("Service Worker 的概念，它的主要思想是在页面和网络之间增加一个拦截器，用来缓存和拦截请求")]),a._v(" "),t("li",[a._v("manifest.json 配置文件，可以让开发者自定义桌面的图标、显示名称、启动方式等信息，还可以设置启动画面、页面主题颜色等信息。")])]),a._v(" "),t("p",[a._v("特点：")]),a._v(" "),t("ul",[t("li",[a._v("可靠：弱网环境提供基本的网络访问；")]),a._v(" "),t("li",[a._v("快速：对网页渲染和数据访问有很好的优化；")]),a._v(" "),t("li",[a._v("融入：引用可以添加到桌面，和普通应用一样有全屏，和推送特性；")])]),a._v(" "),t("h2",{attrs:{id:"加载阶段性能-使用-audits-来优化-web-性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载阶段性能-使用-audits-来优化-web-性能"}},[a._v("#")]),a._v(" 加载阶段性能：使用 Audits 来优化 Web 性能")]),a._v(" "),t("p",[a._v("Performance 非常强大，因为它为我们提供了非常多的运行时数据，利用这些数据我们就可以分析出来 Web 应用的瓶颈。但是要完全学会其使用方式却是非常有难度的，其难点在于这些数据涉及到了特别多的概念，而这些概念又和浏览器的系统架构、消息循环机制、渲染流水线等知识紧密联系在了一起。")]),a._v(" "),t("p",[a._v("Audtis 简单很多，它将检测到的细节数据隐藏在背后，只提供给我们一些直观的性能数据，同时，还会给我们提供一些优化建议。")]),a._v(" "),t("p",[a._v("首先准备 Chrome Canary 版的浏览器或稳定版浏览器。")]),a._v(" "),t("p",[a._v("需要在 Chrome 的隐身模式下工作，这样可以确保我们安装的扩展、浏览器缓存、Cookie 等数据不会影响到检测结果。")]),a._v(" "),t("p",[a._v("Audits 除了生成性能指标以外，还会分析该站点并提供了很多优化建议")]),a._v(" "),t("p",[t("img",{attrs:{src:r(325),alt:"audits"}})]),a._v(" "),t("p",[a._v("性能指标的分数是由六项指标决定的，它们分别是：")]),a._v(" "),t("ol",[t("li",[a._v("首次绘制 (First Paint)；")]),a._v(" "),t("li",[a._v("首次有效绘制 (First Meaningfull Paint)；")]),a._v(" "),t("li",[a._v("首屏时间 (Speed Index)；")]),a._v(" "),t("li",[a._v("首次 CPU 空闲时间 (First CPU Idle)；")]),a._v(" "),t("li",[a._v("完全可交互时间 (Time to Interactive)；")]),a._v(" "),t("li",[a._v("最大估计输入延时 (Max Potential First Input Delay)。")])]),a._v(" "),t("h2",{attrs:{id:"页面性能工具-如何使用-performance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页面性能工具-如何使用-performance"}},[a._v("#")]),a._v(" 页面性能工具：如何使用 Performance")]),a._v(" "),t("h2",{attrs:{id:"性能分析工具-如何分析-performance-中的-main-指标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能分析工具-如何分析-performance-中的-main-指标"}},[a._v("#")]),a._v(" 性能分析工具：如何分析 Performance 中的 Main 指标")])])}),[],!1,null,null,null);t.default=s.exports}}]);