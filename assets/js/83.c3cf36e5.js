(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{423:function(t,a,s){"use strict";s.r(a);var e=s(6),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[t._v("#")]),t._v(" CSRF")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#什么是-csrf"}},[t._v("什么是 CSRF")])]),a("li",[a("a",{attrs:{href:"#发起-csrf-攻击的条件"}},[t._v("发起 CSRF 攻击的条件")])]),a("li",[a("a",{attrs:{href:"#实施-csrf-攻击的方式"}},[t._v("实施 CSRF 攻击的方式")]),a("ul",[a("li",[a("a",{attrs:{href:"#get-类型的-csrf"}},[t._v("GET 类型的 CSRF")])]),a("li",[a("a",{attrs:{href:"#post-类型的-csrf"}},[t._v("POST 类型的 CSRF")])]),a("li",[a("a",{attrs:{href:"#链接类型的-csrf"}},[t._v("链接类型的 CSRF")])])])]),a("li",[a("a",{attrs:{href:"#csrf-检测方法"}},[t._v("CSRF 检测方法")])]),a("li",[a("a",{attrs:{href:"#如何防范-csrf"}},[t._v("如何防范 CSRF")])]),a("li",[a("a",{attrs:{href:"#同源检测"}},[t._v("同源检测")]),a("ul",[a("li",[a("a",{attrs:{href:"#origin-header"}},[t._v("Origin Header")])]),a("li",[a("a",{attrs:{href:"#referer-header"}},[t._v("Referer Header")])]),a("li",[a("a",{attrs:{href:"#无法确认来源域名情况"}},[t._v("无法确认来源域名情况")])]),a("li",[a("a",{attrs:{href:"#如何阻止外域请求"}},[t._v("如何阻止外域请求")])])])]),a("li",[a("a",{attrs:{href:"#csrf-token"}},[t._v("CSRF Token")]),a("ul",[a("li",[a("a",{attrs:{href:"#koa-csrf"}},[t._v("koa-csrf")])])])]),a("li",[a("a",{attrs:{href:"#双重-cookie-验证"}},[t._v("双重 Cookie 验证")])]),a("li",[a("a",{attrs:{href:"#samesite-cookie"}},[t._v("Samesite Cookie")])]),a("li",[a("a",{attrs:{href:"#防止网站被利用"}},[t._v("防止网站被利用")])]),a("li",[a("a",{attrs:{href:"#防护策略"}},[t._v("防护策略")])]),a("li",[a("a",{attrs:{href:"#资料"}},[t._v("资料")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"什么是-csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-csrf"}},[t._v("#")]),t._v(" 什么是 CSRF")]),t._v(" "),a("p",[t._v("CSRF 是跨站请求伪造意思。原理是攻击者构造出一个后端请求地址，诱导用户去点击发起请求。如果是登陆状态，服务端就会以为是用户在操作，从而进行相应的逻辑，比如冒用用户转账，转发邮件，发帖等等。")]),t._v(" "),a("p",[t._v("CSRF 的要点就在于，它不是为了窃取用户的登录凭证（cookie 等），而是直接利用用户已经登录过网站而留存在浏览器上的凭证，诱使用户访问恶意链接，借助登录凭证去执行敏感操作，整个攻击过程是在用户的浏览器上完成的。")]),t._v(" "),a("p",[t._v("案例：Q 币、QQ 音乐向腾讯微博分享歌单、csrf 蠕虫。")]),t._v(" "),a("h2",{attrs:{id:"发起-csrf-攻击的条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发起-csrf-攻击的条件"}},[t._v("#")]),t._v(" 发起 CSRF 攻击的条件")]),t._v(" "),a("ul",[a("li",[t._v("目标站点一定要有 CSRF 漏洞；")]),t._v(" "),a("li",[t._v("用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态；")]),t._v(" "),a("li",[t._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。")]),t._v(" "),a("li",[t._v("跨站请求可以用各种方式：图片 URL、超链接、CORS、Form 提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。")])]),t._v(" "),a("p",[t._v("由于同源策略，第三方网站向自己的网站提交数据时不会携带第三方网站的 cookie。但第三方网站向自己网站服务器提交数据时会携带自己网站的 cookie。为什么会这样，是因为 cookie 是和要请求的目标地址绑定的。")]),t._v(" "),a("p",[t._v("CSRF 通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。")]),t._v(" "),a("h2",{attrs:{id:"实施-csrf-攻击的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实施-csrf-攻击的方式"}},[t._v("#")]),t._v(" 实施 CSRF 攻击的方式")]),t._v(" "),a("h3",{attrs:{id:"get-类型的-csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-类型的-csrf"}},[t._v("#")]),t._v(" GET 类型的 CSRF")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://doc.abc.org/sendcoin?user=hacker&number=100"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("h3",{attrs:{id:"post-类型的-csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-类型的-csrf"}},[t._v("#")]),t._v(" POST 类型的 CSRF")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("form")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hacker-form"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://doc.abc.org/sendcoin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("POST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hacker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("100"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("form")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hacker-form'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h3",{attrs:{id:"链接类型的-csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接类型的-csrf"}},[t._v("#")]),t._v(" 链接类型的 CSRF")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://doc.abc.org/sendcoin?user=hacker&number=100"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("taget")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("_blank"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  点击下载美女照片\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h2",{attrs:{id:"csrf-检测方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf-检测方法"}},[t._v("#")]),t._v(" CSRF 检测方法")]),t._v(" "),a("ul",[a("li",[t._v("抓包记录正常的 HTTP 请求；")]),t._v(" "),a("li",[t._v("分析 HTTP 请求参数是否可预测，以及相应的用途；")]),t._v(" "),a("li",[t._v("去掉或更改 referer 为第三方站点，然后重放请求；")]),t._v(" "),a("li",[t._v("判断是否达到与正常请求的同等效果，若是则可能存在 CSRF 漏洞，反之则不存在。")])]),t._v(" "),a("h2",{attrs:{id:"如何防范-csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何防范-csrf"}},[t._v("#")]),t._v(" 如何防范 CSRF")]),t._v(" "),a("ul",[a("li",[t._v("不让 get 请求对数据进行修改；")]),t._v(" "),a("li",[t._v("不让第三方网站访问到用户的 cookie，设置 cookie 的 SameSite 属性为 strict 或 lax，不让 cookie 随跨域请求携带（就 cookie 不让第三方网站使用）；")]),t._v(" "),a("li",[t._v("同源检测：阻止第三方网站请求接口，验证 Referer 和 Origin；")]),t._v(" "),a("li",[t._v("Token 验证，登陆后服务器下发一个随机 token，之后的请求带上，CSRF Token 或双重 Cookie 验证。")])]),t._v(" "),a("h2",{attrs:{id:"同源检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源检测"}},[t._v("#")]),t._v(" 同源检测")]),t._v(" "),a("p",[t._v("在 HTTP 协议中，每一个异步请求都会携带两个 Header，用于标记来源域名：")]),t._v(" "),a("ul",[a("li",[t._v("Origin Header")]),t._v(" "),a("li",[t._v("Referer Header")])]),t._v(" "),a("p",[t._v("这两个 Header 在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。")]),t._v(" "),a("h3",{attrs:{id:"origin-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#origin-header"}},[t._v("#")]),t._v(" Origin Header")]),t._v(" "),a("p",[t._v("如果 Origin 存在，可以直接使用 Origin 中的字段确认来源域名就可以。但是 Origin 在以下两种情况下并不存在：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("IE11 同源策略：")]),t._v(" IE 11 不会在跨站 CORS 请求上添加 Origin 标头，Referer 头将仍然是唯一的标识。最根本原因是因为 IE 11 对同源的定义和其他浏览器有不同，有两个主要的区别。")]),t._v(" "),a("li",[a("strong",[t._v("302 重定向：")]),t._v(" 在 302 重定向之后 Origin 不包含在重定向的请求中，因为 Origin 可能会被认为是其他来源的敏感信息。对于 302 重定向的情况来说都是定向到新的服务器上的 URL，因此浏览器不想将 Origin 泄漏到新的服务器上。")])]),t._v(" "),a("h3",{attrs:{id:"referer-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#referer-header"}},[t._v("#")]),t._v(" Referer Header")]),t._v(" "),a("p",[t._v("对于 Ajax 请求，图片和 script 等资源请求，Referer 为发起请求的页面地址。对于页面跳转，Referer 为打开页面历史记录的前一个页面地址。因此我们使用 Referer 中链接的 Origin 部分可以得知请求的来源域名。")]),t._v(" "),a("p",[t._v("但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不是很安全。在部分情况下，攻击者可以隐藏，甚至修改自己请求的 Referer。")]),t._v(" "),a("p",[t._v("新版的 "),a("code",[t._v("Referrer Policy")]),t._v(" 规定了五种 Referer 策略："),a("code",[t._v("No Referrer")]),t._v("、"),a("code",[t._v("No Referrer When Downgrade")]),t._v("、"),a("code",[t._v("Origin Only")]),t._v("、"),a("code",[t._v("Origin When Cross-origin")]),t._v("、和 "),a("code",[t._v("Unsafe URL")]),t._v("。之前就存在的三种策略： "),a("code",[t._v("never")]),t._v("、"),a("code",[t._v("default")]),t._v(" 和 "),a("code",[t._v("always")]),t._v("。")]),t._v(" "),a("p",[t._v("把 Referrer Policy 的策略设置成 "),a("code",[t._v("same-origin")]),t._v("，对于同源的链接和引用，会发送 Referer，referer 值为 Host 不带 Path；跨域访问则不携带 Referer。")]),t._v(" "),a("p",[t._v("设置 Referrer Policy 的方法有三种：")]),t._v(" "),a("ol",[a("li",[t._v("在 CSP 设置")]),t._v(" "),a("li",[t._v("页面头部增加 meta 标签")]),t._v(" "),a("li",[t._v("a 标签增加 referrerpolicy 属性")])]),t._v(" "),a("p",[t._v("攻击者可以在自己的请求中隐藏 Referer。")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("![](https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/ff0cdbee.example/withdraw?amount=10000&for=hacker)\n")])])]),a("p",[t._v("以下情况下 Referer 没有或者不可信：")]),t._v(" "),a("ol",[a("li",[t._v("IE6、7 下使用 window.location.href=url 进行界面的跳转，会丢失 Referer。")]),t._v(" "),a("li",[t._v("IE6、7 下使用 window.open，也会缺失 Referer。")]),t._v(" "),a("li",[t._v("HTTPS 页面跳转到 HTTP 页面，所有浏览器 Referer 都丢失。")]),t._v(" "),a("li",[t._v("点击 Flash 上到达另外一个网站的时候，Referer 的情况就比较杂乱，不太可信。 5.javascript:// 伪协议就能以空 referer 的形式发起请求，很容易绕过限制。")])]),t._v(" "),a("h3",{attrs:{id:"无法确认来源域名情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无法确认来源域名情况"}},[t._v("#")]),t._v(" 无法确认来源域名情况")]),t._v(" "),a("p",[t._v("当 Origin 和 Referer 头文件不存在时该怎么办？如果 Origin 和 Referer 都不存在，建议直接进行阻止。")]),t._v(" "),a("h3",{attrs:{id:"如何阻止外域请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何阻止外域请求"}},[t._v("#")]),t._v(" 如何阻止外域请求")]),t._v(" "),a("p",[t._v("通过 Header 的验证，我们可以知道发起请求的来源域名。但是，且慢！当一个请求是页面请求（比如网站的主页），而来源是搜索引擎的链接（例如百度的搜索结果），也会被当成疑似 CSRF 攻击。")]),t._v(" "),a("p",[t._v("此外，CSRF 大多数情况下来自第三方域名，但并不能排除本域发起。如果攻击者有权限在本域发布评论（含链接、图片等，统称 UGC），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。")]),t._v(" "),a("p",[a("strong",[t._v("结论:")])]),t._v(" "),a("p",[t._v("同源验证是一个相对简单的防范方法，能够防范绝大多数的 CSRF 攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。")]),t._v(" "),a("h2",{attrs:{id:"csrf-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf-token"}},[t._v("#")]),t._v(" CSRF Token")]),t._v(" "),a("p",[t._v("Token 是一个比较有效的 CSRF 防护方法，只要页面没有 XSS 漏洞泄露 Token，那么接口的 CSRF 攻击就无法成功。")]),t._v(" "),a("p",[t._v("结论：在会话中存储 CSRF Token 比较繁琐，而且不能在通用的拦截上统一处理所有的接口。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("验证码和密码其实也可以起到 CSRF Token 的作用哦，而且更安全。")]),t._v(" "),a("p",[t._v("为什么很多银行等网站会要求已经登录的用户在转账时再次输入密码，现在是不是有一定道理了？")])]),t._v(" "),a("h3",{attrs:{id:"koa-csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#koa-csrf"}},[t._v("#")]),t._v(" koa-csrf")]),t._v(" "),a("p",[t._v("koa 中 可以使用 koa-csrf 插件用来防止 CSRF 攻击。原理是在 session 之中写入一个秘密的 token，用户每次使用 POST 方法提交数据的时候，必须含有这个 token，否则就会抛出错误。")]),t._v(" "),a("p",[t._v("POST 请求含有 token，可以是以下几种方式之一，koa-csrf 插件就能获得 token。")]),t._v(" "),a("ul",[a("li",[t._v("表单的_csrf 字段")]),t._v(" "),a("li",[t._v("查询字符串的_csrf 字段")]),t._v(" "),a("li",[t._v("HTTP 请求头信息的 x-csrf-token 字段")]),t._v(" "),a("li",[t._v("HTTP 请求头信息的 x-xsrf-token 字段")])]),t._v(" "),a("h2",{attrs:{id:"双重-cookie-验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双重-cookie-验证"}},[t._v("#")]),t._v(" 双重 Cookie 验证")]),t._v(" "),a("p",[t._v("双重 Cookie 采用以下流程：")]),t._v(" "),a("ul",[a("li",[t._v("在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串（例如 csrfcookie=v8g9e4ksfhw ）。")]),t._v(" "),a("li",[t._v("在前端向后端发起请求时，取出 Cookie，并添加到 URL 的参数中（接上例 POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw ）。")]),t._v(" "),a("li",[t._v("后端接口验证 Cookie 中的字段与 URL 参数中的字段是否一致，不一致则拒绝。")])]),t._v(" "),a("p",[t._v("此方法相对于 CSRF Token 就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储 Token。")]),t._v(" "),a("p",[a("strong",[t._v("结论:")])]),t._v(" "),a("p",[t._v("用双重 Cookie 防御 CSRF 的优点：")]),t._v(" "),a("ul",[a("li",[t._v("无需使用 Session，适用面更广，易于实施。")]),t._v(" "),a("li",[t._v("Token 储存于客户端中，不会给服务器带来压力。")]),t._v(" "),a("li",[t._v("相对于 Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("Cookie 中增加了额外的字段。")]),t._v(" "),a("li",[t._v("如果有其他漏洞（例如 XSS），攻击者可以注入 Cookie，那么该防御方式失效。")]),t._v(" "),a("li",[t._v("难以做到子域名的隔离。")]),t._v(" "),a("li",[t._v("为了确保 Cookie 传输安全，采用这种防御方式的最好确保用整站 HTTPS 的方式，如果还没切 HTTPS 的使用这种方式也会有风险。")])]),t._v(" "),a("h2",{attrs:{id:"samesite-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#samesite-cookie"}},[t._v("#")]),t._v(" Samesite Cookie")]),t._v(" "),a("p",[t._v("Samesite 有："),a("code",[t._v("Strict")]),t._v("和"),a("code",[t._v("Lax")]),t._v(" 两个属性。")]),t._v(" "),a("ul",[a("li",[t._v("Strict： 这种称为严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie。")]),t._v(" "),a("li",[t._v("Lax：其他网站通过页面跳转过来的时候可以使用 Cookie，可以保障外域连接打开页面时用户的登录状态。但相应的，其安全性也比较低。")])]),t._v(" "),a("p",[t._v("b.com 设置了如下 Cookie：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Samesite"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Strict\nSet"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Samesite"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Lax\nSet"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" baz"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),a("p",[t._v("我们在 a.com 下发起对 b.com 的任意请求，foo 这个 Cookie 都不会被包含在 Cookie 请求头中，但 bar 会。")]),t._v(" "),a("blockquote",[a("p",[t._v("另外一个问题是 Samesite 的兼容性不是很好，现阶段除了从新版 Chrome 和 Firefox 支持以外，Safari 以及 iOS Safari 都还不支持，现阶段看来暂时还不能普及。")])]),t._v(" "),a("h2",{attrs:{id:"防止网站被利用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防止网站被利用"}},[t._v("#")]),t._v(" 防止网站被利用")]),t._v(" "),a("ul",[a("li",[t._v("严格管理所有的上传接口，防止任何预期之外的上传内容（例如 HTML）。")]),t._v(" "),a("li",[t._v("添加 Header X­Content­Type­Options: nosniff 防止黑客上传 HTML 内容的资源（例如图片）被解析为网页。")]),t._v(" "),a("li",[t._v("对于用户上传的图片，进行转存或者校验。不要直接使用用户填写的图片链接。")])]),t._v(" "),a("h2",{attrs:{id:"防护策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防护策略"}},[t._v("#")]),t._v(" 防护策略")]),t._v(" "),a("ul",[a("li",[t._v("CSRF 自动防御策略：同源检测（Origin 和 Referer 验证）。")]),t._v(" "),a("li",[t._v("CSRF 主动防御措施：Token 验证 或者 双重 Cookie 验证 以及配合 Samesite Cookie。")]),t._v(" "),a("li",[t._v("保证页面的幂等性，后端接口不要在 GET 页面中做用户操作。")])]),t._v(" "),a("h2",{attrs:{id:"资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://dpurl.cn/DWVhPpS",target:"_blank",rel:"noopener noreferrer"}},[t._v("美团技术资料-前端系列"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("OWASP."),a("a",{attrs:{href:"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cross-Site_RequestForgery(CSRF)_Prevention_Cheat_Sheet"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Gmail Security "),a("a",{attrs:{href:"https://www.davidairey.com/google-gmail-security-hijack/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hijack Case.Google-Gmail-Security-Hijack"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Netsparker "),a("a",{attrs:{href:"https://www.netsparker.com/blog/web-security/same-site-cookie-attribute-prevent-cross-site-request-forgery/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Blog.Same-Site-Cookie-Attribute-Prevent-Cross-site-Request-Forgery"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("MDN."),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#IE_Exceptions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Same-origin_policy#IE_Exceptions"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);