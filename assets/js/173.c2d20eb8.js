(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{606:function(t,a,e){"use strict";e.r(a);var s=e(15),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"ts3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ts3"}},[t._v("#")]),t._v(" TS3")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#interfaces-vs-type-aliases"}},[t._v("Interfaces vs. Type Aliases")]),e("ul",[e("li",[e("a",{attrs:{href:"#对-type-的定义叫-type-alias-而非直接就叫-type"}},[t._v("对 type 的定义叫 type alias 而非直接就叫 type")])]),e("li",[e("a",{attrs:{href:"#到底应该用-type-还是-interface"}},[t._v("到底应该用 type 还是 interface ？")])]),e("li",[e("a",{attrs:{href:"#资料"}},[t._v("资料")])])])])])]),e("p"),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.typescriptlang.org/docs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript Documentation"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"interfaces-vs-type-aliases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interfaces-vs-type-aliases"}},[t._v("#")]),t._v(" Interfaces vs. Type Aliases")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#interfaces-vs-type-aliases",target:"_blank",rel:"noopener noreferrer"}},[t._v("Interfaces vs. Type Aliases"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/351213183",target:"_blank",rel:"noopener noreferrer"}},[t._v("Typescript 中 type 和 interface 有什么区别？"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("As we mentioned, type aliases can act sort of like interfaces; however, there are some subtle differences.\nAlmost all features of an interface are available in type, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.")])]),t._v(" "),e("p",[t._v("Extending an interface")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bear")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  honey"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bear "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBear")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \nbear"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\nbear"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("honey\n")])])]),e("p",[t._v("Extending a type via intersections")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bear")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Animal "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  honey"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bear "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBear")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbear"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbear"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("honey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("主要区别：")]),t._v(" "),e("ul",[e("li",[t._v("接口是通过继承的方式来扩展，类型别名是通过 & 来扩展。")]),t._v(" "),e("li",[t._v("接口可以自动合并，而类型别名不行")])]),t._v(" "),e("h3",{attrs:{id:"对-type-的定义叫-type-alias-而非直接就叫-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对-type-的定义叫-type-alias-而非直接就叫-type"}},[t._v("#")]),t._v(" 对 type 的定义叫 type alias 而非直接就叫 type")]),t._v(" "),e("ul",[e("li",[t._v("Typescript 的 type 关键字表示的是类型别名；")]),t._v(" "),e("li",[t._v("被 type 关键词声明的变量表示的还是 Types (比如 Animal 就是动物类型)；")])]),t._v(" "),e("h3",{attrs:{id:"到底应该用-type-还是-interface"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#到底应该用-type-还是-interface"}},[t._v("#")]),t._v(" 到底应该用 type 还是 interface ？")]),t._v(" "),e("ul",[e("li",[t._v("能用 interface 的地方就用 interface，否则用 type。如果我们是定义一个 object，那么最好是使用 interface 去做类型声明，什么时候用 type 呢，当定义一个 function 的时候，用 type 会更好一些")])]),t._v(" "),e("h3",{attrs:{id:"资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/44344256",target:"_blank",rel:"noopener noreferrer"}},[t._v("写了这么多年代码，你真的了解SOLID吗？"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);